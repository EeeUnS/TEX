\relax 
\providecommand\hyper@newdestlabel[2]{}
\providecommand\zref@newlabel[2]{}
\providecommand*{\memsetcounter}[2]{}
\providecommand\HyperFirstAtBeginDocument{\AtBeginDocument}
\HyperFirstAtBeginDocument{\ifx\hyper@anchor\@undefined
\global\let\oldcontentsline\contentsline
\gdef\contentsline#1#2#3#4{\oldcontentsline{#1}{#2}{#3}}
\global\let\oldnewlabel\newlabel
\gdef\newlabel#1#2{\newlabelxx{#1}#2}
\gdef\newlabelxx#1#2#3#4#5#6{\oldnewlabel{#1}{{#2}{#3}}}
\AtEndDocument{\ifx\hyper@anchor\@undefined
\let\contentsline\oldcontentsline
\let\newlabel\oldnewlabel
\fi}
\fi}
\global\let\hyper@last\relax 
\gdef\HyperFirstAtBeginDocument#1{#1}
\providecommand\HyField@AuxAddToFields[1]{}
\providecommand\HyField@AuxAddToCoFields[2]{}
\@writefile{toc}{\contentsline {section}{차\nobreakspace  {}례}{1}{section*.1}}
\@writefile{toc}{\contentsline {section}{\numberline {1}소개}{2}{section.0.1}}
\@writefile{toc}{\contentsline {section}{\numberline {2}의사코드 및 동작}{2}{section.0.2}}
\@writefile{lof}{\contentsline {figure}{\numberline {1}{\ignorespaces quick sort 작동 예시}}{3}{figure.0.1}}
\@writefile{toc}{\contentsline {section}{\numberline {3}복잡도 분석}{4}{section.0.3}}
\@writefile{toc}{\contentsline {subsection}{\numberline {3.1}최악의 분할 케이스}{4}{subsection.0.3.1}}
\@writefile{toc}{\contentsline {subsection}{\numberline {3.2}최선의 분할 케이스}{4}{subsection.0.3.2}}
\@writefile{toc}{\contentsline {subsection}{\numberline {3.3}직관적인 일반적인 케이스 방법}{4}{subsection.0.3.3}}
\@writefile{lof}{\contentsline {figure}{\numberline {2}{\ignorespaces quick sort 최선의 분할 케이스 재귀 트리}}{5}{figure.0.2}}
\@writefile{lof}{\contentsline {figure}{\numberline {3}{\ignorespaces quick sort 일반적인 재귀 트리}}{5}{figure.0.3}}
\@writefile{toc}{\contentsline {section}{\numberline {4}상세 분석}{6}{section.0.4}}
\@writefile{toc}{\contentsline {subsection}{\numberline {4.1}최악의-케이스 분석 }{6}{subsection.0.4.1}}
\@writefile{toc}{\contentsline {section}{\numberline {5}여러 기초 지식}{7}{section.0.5}}
\@writefile{toc}{\contentsline {subsection}{\numberline {5.1}시간복잡도}{7}{subsection.0.5.1}}
\@writefile{loe}{\contentsline {dfn}{\numberline {5.1}정의\thmtformatoptarg {복잡도}}{7}{dfn.0.5.1}}
\@writefile{toc}{\contentsline {subsection}{\numberline {5.2}조화 급수의 상한과 하한}{7}{subsection.0.5.2}}
\@writefile{lof}{\contentsline {figure}{\numberline {4}{\ignorespaces 증가함수의 대소비교}}{8}{figure.0.4}}
\@writefile{toc}{\contentsline {subsection}{\numberline {5.3}확률}{8}{subsection.0.5.3}}
\@writefile{toc}{\contentsline {section}{\numberline {6}기대 수행 시간}{9}{section.0.6}}
\@writefile{loe}{\contentsline {lemma}{\numberline {6.1}Lemma}{9}{lemma.0.6.1}}
\@writefile{toc}{\contentsline {section}{\numberline {7}Quick sort의 캐시 히트율}{12}{section.0.7}}
\@writefile{lof}{\contentsline {figure}{\numberline {5}{\ignorespaces Comparing Quicksort and Radix Sort by (a) instructions executed per item sorted (b) time per item sorted, and (c) cache misses per item sorted. This data is from a paper by LaMarca and Ladner [1996]. Due to such results, new versions of Radix Sort have been invented that take memory hierarchy into account, to regain its algorithmic advantages. Th e basic idea of cache optimizations is to use all the data in a block repeatedly before it is replaced on a miss.}}{13}{figure.0.5}}
\@writefile{toc}{\contentsline {section}{\numberline {8}개선}{14}{section.0.8}}
\@writefile{toc}{\contentsline {subsection}{\numberline {8.1}재귀함수 제거}{14}{subsection.0.8.1}}
\@writefile{toc}{\contentsline {subsection}{\numberline {8.2}Quick insertion sort}{14}{subsection.0.8.2}}
\@writefile{lof}{\contentsline {figure}{\numberline {6}{\ignorespaces 삽입정렬 수행의 분할크기 n에 따른 퀵정렬 수행시간}}{14}{figure.0.6}}
\@writefile{toc}{\contentsline {subsection}{\numberline {8.3}pivot}{15}{subsection.0.8.3}}
\@writefile{toc}{\contentsline {subsection}{\numberline {8.4}multi threading}{15}{subsection.0.8.4}}
\bibcite{reference1}{1}
\bibcite{reference2}{2}
\bibcite{reference3}{3}
\@writefile{toc}{\contentsline {chapter}{참고\nobreakspace  {}문헌}{16}{chapter*.2}}
\memsetcounter{lastsheet}{16}
\memsetcounter{lastpage}{16}
